run-name: "${{ github.event.client_payload.title }} Imported by ${{ github.event.client_payload.instanceName }}"
name: Arr-Stack Import

on:
  repository_dispatch:
    types: [arr-import]

permissions:
  id-token: write
  contents: write

env:
  MOVIE_METADATA_FILE: movie-metadata.yml
  SHOW_METADATA_FILE: show-metadata.yml
  CLIENT_PAYLOAD_FILE: json_data.json
  UPDATE_SUMMARY_FILE: metadata_updates.md

jobs:
  update:
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.commit-changes.outputs.sha }}
    steps:
      - name: Save Client Payload to File
        env:
          CLIENT_PAYLOAD: "${{ toJson(github.event.client_payload) }}"
        run: |
          echo "$CLIENT_PAYLOAD" > $CLIENT_PAYLOAD_FILE
          cat "$CLIENT_PAYLOAD_FILE"

      - name: Upload Client Payload
        uses: actions/upload-artifact@v4
        with:
          name: client_payload
          path: ${{ env.CLIENT_PAYLOAD_FILE }}
      
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Update metadata file with movie information
        if: ${{ github.event.client_payload.instanceName == 'Radarr' }}
        env:
          GENRES: ${{ toJson(github.event.client_payload.movie.genres) }}
        shell: bash
        run: |
          title="${{ github.event.client_payload.movie.title }}"
          encoded_title="$(echo "$title" | sed -e 's/ /+/g' -e 's/&/%26/g')"
          release_year="${{ github.event.client_payload.remoteMovie.year }}"
          tmdb_id=${{ github.event.client_payload.remoteMovie.tmdbId }}
          tpdb_search="https://theposterdb.com/search?term=$encoded_title&section=movies"
          genres=$GENRES

          lower_title="${title,,}"  # convert to lowercase for comparison
          sort_title="$title"
          for article in "a " "an " "the "; do
              if [[ "$lower_title" == "$article"* ]]; then
                  sort_title="${title:${#article}}"
                  break
              fi
          done
          
          sort_title=$(echo "$sort_title" | iconv -f UTF-8 -t ASCII//TRANSLIT)
          
          echo $tmdb_id
          echo $title
          echo $release_year
          echo $sort_title
          echo $tpdb_search

          if [[ $(yq '.metadata.${{ github.event.client_payload.remoteMovie.tmdbId }}' ${{ env.MOVIE_METADATA_FILE }}) == null ]]; then
            echo "Movie does not exist, adding"
            yq -i '.metadata += {'"$tmdb_id"': {"label_title": "'"$title"'", "sort_title": "'"$sort_title"'", "release_year": "'"$release_year"'", "url_poster": "", "tpdb_search": "'"$tpdb_search"'", "genre.sync": '"$genres"'}}' ${{ env.MOVIE_METADATA_FILE }}
            
            # https://chatgpt.com/share/68757652-e170-8003-b6e1-d625f0fb59f8
            # Sort title sorting
            yq -i '
              .metadata |= (
                to_entries
                | map(
                    .value.temp_sort = (
                      (.value.sort_title | downcase)
                      | sub("\\b([0-9])\\b"; "00000${1}")
                      | sub("\\b([0-9]{2})\\b"; "0000${1}")
                      | sub("\\b([0-9]{3})\\b"; "000${1}")
                      | sub("\\b([0-9]{4})\\b"; "00${1}")
                      | sub("\\b([0-9]{5})\\b"; "0${1}")
                    )
                  )
                | sort_by(.value.temp_sort)
                | map(.value |= del(.temp_sort))
                | from_entries
              )
              ' ${{ env.MOVIE_METADATA_FILE }}

            # General key sorting
            yq -i '
              .metadata |= with_entries(
                .value |= (
                  {
                    "label_title": .label_title,
                    "sort_title": .sort_title,
                    "release_year": .release_year,
                    "url_poster": .url_poster,
                    "tpdb_search": .tpdb_search
                  } + .
                )
              )
              ' ${{ env.MOVIE_METADATA_FILE }}

            # Extra "studio" key sorting if exists
            yq -i '
              .metadata |= with_entries(
                .value |= (
                  {
                    "label_title": .label_title,
                    "sort_title": .sort_title,
                    "release_year": .release_year,
                    "url_poster": .url_poster,
                    "tpdb_search": .tpdb_search,
                    "studio": .studio
                  } + .
                )
              )
              ' ${{ env.MOVIE_METADATA_FILE }}
              
            yq -i '.metadata.${{ github.event.client_payload.remoteMovie.tmdbId }}.release_year style="single"' ${{ env.MOVIE_METADATA_FILE }}
            yq -i '.metadata.${{ github.event.client_payload.remoteMovie.tmdbId }}.url_poster style="single"' ${{ env.MOVIE_METADATA_FILE }}
            yq ${{ env.MOVIE_METADATA_FILE }} # Debug
          fi
    
      - name: Update metadata file with show information
        if: ${{ github.event.client_payload.instanceName == 'Sonarr' }}
        shell: bash
        env:
          EPISODES: ${{ toJson(github.event.client_payload.episodes) }}
          GENRES: ${{ toJson(github.event.client_payload.series.genres) }}
        run: |
          title="${{ github.event.client_payload.series.title }}"
          encoded_title="$(echo "$title" | sed -e 's/ /+/g' -e 's/&/%26/g')"
          release_year="${{ github.event.client_payload.series.year }}"
          tvdb_id=${{ github.event.client_payload.series.tvdbId }}
          tpdb_search="https://theposterdb.com/search?term=$encoded_title&section=shows"
          genres=$GENRES

          lower_title="${title,,}"  # convert to lowercase for comparison
          sort_title="$title"
          for article in "a " "an " "the "; do
              if [[ "$lower_title" == "$article"* ]]; then
                  sort_title="${title:${#article}}"
                  break
              fi
          done
          
          sort_title=$(echo "$sort_title" | iconv -f UTF-8 -t ASCII//TRANSLIT)
          
          readarray -t seasons < <(echo "$EPISODES" | jq '.[].seasonNumber' | sort -u)
          
          echo $tvdb_id
          echo $title
          echo $release_year
          echo $sort_title
          echo $tpdb_search

          if [[ $(yq '.metadata.${{ github.event.client_payload.series.tvdbId }}' ${{ env.SHOW_METADATA_FILE }}) == null ]]; then
            echo "Show does not exist, adding"
            yq -i '.metadata += {'"$tvdb_id"': {"label_title": "'"$title"'", "sort_title": "'"$sort_title"'", "release_year": "'"$release_year"'", "url_poster": "", "tpdb_search": "'"$tpdb_search"'", "genre.sync": '"$genres"'}}' ${{ env.SHOW_METADATA_FILE }}
            
            # https://chatgpt.com/share/68757652-e170-8003-b6e1-d625f0fb59f8
            # Sort title sorting
            yq -i '
              .metadata |= (
                to_entries
                | map(
                    .value.temp_sort = (
                      (.value.sort_title | downcase)
                      | sub("\\b([0-9])\\b"; "00000${1}")
                      | sub("\\b([0-9]{2})\\b"; "0000${1}")
                      | sub("\\b([0-9]{3})\\b"; "000${1}")
                      | sub("\\b([0-9]{4})\\b"; "00${1}")
                      | sub("\\b([0-9]{5})\\b"; "0${1}")
                    )
                  )
                | sort_by(.value.temp_sort)
                | map(.value |= del(.temp_sort))
                | from_entries
              )
              ' ${{ env.SHOW_METADATA_FILE }}

            # General key sorting
            yq -i '
              .metadata |= with_entries(
                .value |= (
                  {
                    "label_title": .label_title,
                    "sort_title": .sort_title,
                    "release_year": .release_year,
                    "url_poster": .url_poster,
                    "tpdb_search": .tpdb_search
                  } + .
                )
              )
              ' ${{ env.SHOW_METADATA_FILE }}

            # Extra "studio" key sorting if exists
            yq -i '
              .metadata |= with_entries(
                .value |= (
                  {
                    "label_title": .label_title,
                    "sort_title": .sort_title,
                    "release_year": .release_year,
                    "url_poster": .url_poster,
                    "tpdb_search": .tpdb_search,
                    "studio": .studio
                  } + .
                )
              )
              ' ${{ env.SHOW_METADATA_FILE }}
            
            yq -i '(.metadata[] | .seasons) |= (to_entries | sort_by(.key | tonumber) | from_entries)' ${{ env.SHOW_METADATA_FILE }}
            yq -i '.metadata.${{ github.event.client_payload.series.tvdbId }}.release_year style="single"' ${{ env.SHOW_METADATA_FILE }}
            yq -i '.metadata.${{ github.event.client_payload.series.tvdbId }}.url_poster style="single"' ${{ env.SHOW_METADATA_FILE }}
            yq ${{ env.SHOW_METADATA_FILE }} # Debug
          fi
          for season in "${seasons[@]}"; do
            if [[ $(yq ".metadata.${{ github.event.client_payload.series.tvdbId }}.seasons.$season" ${{ env.SHOW_METADATA_FILE }}) == null ]]; then
              echo "Season does not exist, adding"
              yq -i '.metadata.${{ github.event.client_payload.series.tvdbId }}.seasons += {'"$season"': {"url_poster": ""}}' ${{ env.SHOW_METADATA_FILE }}
              yq -i '.metadata.${{ github.event.client_payload.series.tvdbId }}.seasons.'"$season"'.url_poster style="single"' ${{ env.SHOW_METADATA_FILE }}
              yq ${{ env.SHOW_METADATA_FILE }} # Debug
            fi
          done
      
      - name: Commit Changes to Main
        id: commit-changes
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add ${{ env.MOVIE_METADATA_FILE }}
          git add ${{ env.SHOW_METADATA_FILE }}
          if ! git diff-index --quiet main; then
            git commit -m "Updating ${{ github.event.client_payload.title }}" >> "$UPDATE_SUMMARY_FILE"
            echo >> "$UPDATE_SUMMARY_FILE"
            git push >> "$UPDATE_SUMMARY_FILE"
            echo >> "$UPDATE_SUMMARY_FILE"
          else
            echo "No changes to commit." >> $UPDATE_SUMMARY_FILE
          fi
          sha=$(git rev-parse HEAD)
          echo "sha=$sha" >> $GITHUB_OUTPUT

      - name: Create Job Summary
        run: |
          echo "## Metadata Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`diff" >> $GITHUB_STEP_SUMMARY
          cat "$UPDATE_SUMMARY_FILE" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
      
      
  find-missing-posters:
    needs: update
    uses: "chase-roohms/kometa-configs/.github/workflows/find-missing-posters.yml@main"
    with:
      sha: ${{ needs.update.outputs.sha }}
      
  find-missing-genres:
    needs: update
    uses: "chase-roohms/kometa-configs/.github/workflows/find-missing-genres.yml@main"
    with:
      sha: ${{ needs.update.outputs.sha }}
