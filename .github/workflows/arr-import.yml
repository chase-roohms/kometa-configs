run-name: "${{ github.event.client_payload.title }} Imported by ${{ github.event.client_payload.instanceName }}"
name: Arr-Stack Import

on:
  repository_dispatch:
    types: [arr-import]

permissions:
  id-token: write
  contents: write

env:
  MOVIE_METADATA_FILE: movie-metadata.yml
  SHOW_METADATA_FILE: show-metadata.yml
  CLIENT_PAYLOAD_FILE: json_data.json
  UPDATE_SUMMARY_FILE: metadata_updates.md

jobs:
  update:
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.commit-changes.outputs.sha }}
    steps:
      - name: Save Client Payload to File
        env:
          CLIENT_PAYLOAD: "${{ toJson(github.event.client_payload) }}"
        run: |
          echo "$CLIENT_PAYLOAD" > $CLIENT_PAYLOAD_FILE
          cat "$CLIENT_PAYLOAD_FILE"

      - name: Upload Client Payload
        uses: actions/upload-artifact@v4
        with:
          name: client_payload
          path: ${{ env.CLIENT_PAYLOAD_FILE }}
      
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Update metadata file with movie information
        if: ${{ github.event.client_payload.instanceName == 'Radarr' }}
        env:
          GENRES: ${{ toJson(github.event.client_payload.movie.genres) }}
        shell: bash
        run: |
          tmdb_id=${{ github.event.client_payload.remoteMovie.tmdbId }}
          title="${{ github.event.client_payload.movie.title }}"
          sort_title="$(bash "functions/media/get-sort-title.sh" "$title")"
          release_year="${{ github.event.client_payload.remoteMovie.year }}"
          tpdb_search="$(bash "functions/media/get-tpdb-search.sh" "$title" "movie")"
          genres=$GENRES

          if [[ $(yq '.metadata.${{ github.event.client_payload.remoteMovie.tmdbId }}' ${{ env.MOVIE_METADATA_FILE }}) == null ]]; then
            echo "Movie does not exist, adding"
            yq -i '.metadata += {'"$tmdb_id"': {"label_title": "'"$title"'", "sort_title": "'"$sort_title"'", "release_year": "'"$release_year"'", "url_poster": "", "tpdb_search": "'"$tpdb_search"'", "genre.sync": '"$genres"'}}' ${{ env.MOVIE_METADATA_FILE }}
          fi
    
      - name: Update metadata file with show information
        if: ${{ github.event.client_payload.instanceName == 'Sonarr' }}
        shell: bash
        env:
          EPISODES: ${{ toJson(github.event.client_payload.episodes) }}
          GENRES: ${{ toJson(github.event.client_payload.series.genres) }}
        run: |
          tvdb_id=${{ github.event.client_payload.series.tvdbId }}
          title="${{ github.event.client_payload.movie.title }}"
          sort_title="$(bash "functions/media/get-sort-title.sh" "$title")"
          release_year="${{ github.event.client_payload.series.year }}"
          tpdb_search="$(bash "functions/media/get-tpdb-search.sh" "$title" "show")"
          genres=$GENRES
          readarray -t seasons < <(echo "$EPISODES" | jq '.[].seasonNumber' | sort -u)

          if [[ $(yq '.metadata.${{ github.event.client_payload.series.tvdbId }}' ${{ env.SHOW_METADATA_FILE }}) == null ]]; then
            echo "Show does not exist, adding"
            yq -i '.metadata += {'"$tvdb_id"': {"label_title": "'"$title"'", "sort_title": "'"$sort_title"'", "release_year": "'"$release_year"'", "url_poster": "", "tpdb_search": "'"$tpdb_search"'", "genre.sync": '"$genres"'}}' ${{ env.SHOW_METADATA_FILE }}
          fi
          for season in "${seasons[@]}"; do
            if [[ $(yq ".metadata.${{ github.event.client_payload.series.tvdbId }}.seasons.$season" ${{ env.SHOW_METADATA_FILE }}) == null ]]; then
              echo "Season does not exist, adding"
              yq -i '.metadata.${{ github.event.client_payload.series.tvdbId }}.seasons += {'"$season"': {"url_poster": ""}}' ${{ env.SHOW_METADATA_FILE }}
            fi
          done

      - name: Sort and format metadata files
        run: |
          # Sort the metadata files
          bash "functions/yaml/sort-metadata-file.sh" "$MOVIE_METADATA_FILE"
          bash "functions/yaml/sort-metadata-file.sh" "$SHOW_METADATA_FILE"
          
          # Format the metadata files (mostly setting 'style="single"' to use single quotes over double quotes when applicable
          bash "functions/yaml/sort-metadata-file.sh" "$MOVIE_METADATA_FILE"
          bash "functions/yaml/sort-metadata-file.sh" "$SHOW_METADATA_FILE"
      
      - name: Commit Changes to Main
        id: commit-changes
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          old_sha=$(git rev-parse HEAD)
          git add ${{ env.MOVIE_METADATA_FILE }}
          git add ${{ env.SHOW_METADATA_FILE }}
          if ! git diff-index --quiet main; then
            git commit -m "Updating ${{ github.event.client_payload.title }}" >> "$UPDATE_SUMMARY_FILE"
            git push >> "$UPDATE_SUMMARY_FILE"
            new_sha=$(git rev-parse HEAD)
            git diff --unified=0 --no-color "$old_sha" "$new_sha" >> "$UPDATE_SUMMARY_FILE"
            sha=$new_sha
          else
            echo "No changes to commit." >> $UPDATE_SUMMARY_FILE
            sha=$old_sha
          fi
          echo "sha=$sha" >> $GITHUB_OUTPUT

      - name: Create Job Summary
        run: |
          echo "## Metadata Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`diff" >> $GITHUB_STEP_SUMMARY
          cat "$UPDATE_SUMMARY_FILE" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
      
  find-missing-posters:
    needs: update
    uses: "chase-roohms/kometa-configs/.github/workflows/find-missing-posters.yml@main"
    with:
      sha: ${{ needs.update.outputs.sha }}
      
  find-missing-genres:
    needs: update
    uses: "chase-roohms/kometa-configs/.github/workflows/find-missing-genres.yml@main"
    with:
      sha: ${{ needs.update.outputs.sha }}
