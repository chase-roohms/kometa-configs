name: Find Missing Posters

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      sha:
        description: SHA of the most recent commit, likely one created in the executing job
        type: string
        required: true

permissions:
  id-token: write
  contents: read

env:
  MOVIE_METADATA_FILE: movie-metadata.yml
  SHOW_METADATA_FILE: show-metadata.yml
  MOVIE_REPORT_FILE: poster_report_movies.md
  SHOW_REPORT_FILE: poster_report_shows.md

jobs:
  update:
    name: Find Missing Posters
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: github.event_name == 'workflow_dispatch'
        id: checkout-dispatch
        uses: actions/checkout@v4.2.2

      - name: Checkout
        if: github.event_name != 'workflow_dispatch'
        id: checkout-other-events
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ inputs.sha }}
      
      - name: Find Missing Posters
        id: run-script
        run: |
          MOVIE_METADATA_FILE=$MOVIE_METADATA_FILE
          SHOW_METADATA_FILE=$SHOW_METADATA_FILE
          function file_exists() {
            [[ -f "$1" ]] || { echo "File not found: $1"; exit 1; }
          }
          
          function get_tpdb_search_link() {
            local title="$1"
            local section="$2"
            local encoded_title="${title// /+}"
            encoded_title="${encoded_title//&/%26}"
            echo "https://theposterdb.com/search?term=${encoded_title}&section=${section}"
          }
          
          function get_missing_movie_posters() {
            local file="$1"
            yq '.metadata' "$file" | yq 'to_entries | .[]' -o=json | jq -c '
              select(.value.url_poster == null or .value.url_poster == "")
              | {
                  db_id: .key,
                  title: .value.label_title,
                  release_year: (.value.release_year // "Unknown")
                }' | while read -r line; do
              db_id=$(echo "$line" | jq -r '.db_id')
              title=$(echo "$line" | jq -r '.title')
              year=$(echo "$line" | jq -r '.release_year')
              search_url=$(get_tpdb_search_link "$title" "movies")
              echo "|[${db_id}](https://www.themoviedb.org/movie/${db_id})|${title}|${year}|[Search on TPDB](${search_url})|"
            done
          }
          
          function get_missing_show_posters() {
            local file="$1"
            yq '.metadata' "$file" | yq 'to_entries | .[]' -o=json | jq -c '.' | while read -r entry; do
              db_id=$(echo "$entry" | jq -r '.key')
              title=$(echo "$entry" | jq -r '.value.label_title')
              year=$(echo "$entry" | jq -r '.value.release_year // "Unknown"')
              has_parent=$(echo "$entry" | jq -r '(.value.url_poster == null or .value.url_poster == "")')
              seasons=$(echo "$entry" | jq -r '.value.seasons // {}' | jq -r 'to_entries | map(select(.value.url_poster == null or .value.url_poster == "")) | map(.key | tostring) | join(", ")')
              out_seasons=""
              if [[ "$has_parent" == "true" ]]; then
                out_seasons="Parent"
              fi
              if [[ -n "$seasons" ]]; then
                [[ -n "$out_seasons" ]] && out_seasons+=", "
                out_seasons+="$seasons"
              fi
              if [[ -n "$out_seasons" ]]; then
                search_url=$(get_tpdb_search_link "$title" "shows")
                echo "|[${db_id}](https://www.thetvdb.com/search?query=${db_id})|${title}|${year}|${out_seasons}|[Search on TPDB](${search_url})|"
              fi
            done
          }
          
          function write_movie_report() {
            local MOVIE_METADATA_FILE="$1"
            local output="$MOVIE_REPORT_FILE"
          
            {
              get_missing_movie_posters "$MOVIE_METADATA_FILE"
            } > "$output"
          }
          
          function write_show_report() {
            local SHOW_METADATA_FILE="$1"
            local output="$SHOW_REPORT_FILE"
          
            {
              get_missing_show_posters "$SHOW_METADATA_FILE"
            } > "$output"
          }
          
          # ──────────────────────────────── MAIN ───────────────────────────────── #
          file_exists "$MOVIE_METADATA_FILE"
          file_exists "$SHOW_METADATA_FILE"

          echo "Starting movie report"
          write_movie_report "$MOVIE_METADATA_FILE"
          echo "Starting show report"
          write_show_report "$SHOW_METADATA_FILE"

      - name: Create Job Summary
        run: |
          if [ -f "$MOVIE_REPORT_FILE" ] && [ -s "$MOVIE_REPORT_FILE" ]; then
            echo "# Missing Posters in Movies" >> $GITHUB_STEP_SUMMARY
            echo "|TMDB ID|Title|Release Year|Find a Poster|" >> $GITHUB_STEP_SUMMARY
            echo "|-------|-----|------------|-------------|" >> $GITHUB_STEP_SUMMARY
            cat $SHOW_REPORT_FILE >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "$SHOW_REPORT_FILE" ] && [ -s "$SHOW_REPORT_FILE" ]; then
            echo "# Missing Posters in Shows" >> $GITHUB_STEP_SUMMARY
            echo "|TVDB ID|Title|Release Year|Missing Seasons|Find a Poster|" >> $GITHUB_STEP_SUMMARY
            echo "|-------|-----|------------|----------------|-------------|" >> $GITHUB_STEP_SUMMARY
            cat $SHOW_REPORT_FILE >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "$MOVIE_REPORT_FILE" ] && [ ! -s "$MOVIE_REPORT_FILE" ] && [ -f "$SHOW_REPORT_FILE" ] && [ ! -s "$SHOW_REPORT_FILE" ]; then
            echo "# No Posters Missing" >> $GITHUB_STEP_SUMMARY
          fi
