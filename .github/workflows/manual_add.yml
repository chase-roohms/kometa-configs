name: Manually add Media

on:
  workflow_dispatch:
    inputs:
      title:
        description: Title
        required: true
        type: string
      release_year:
        description: Release Year
        required: true
        type: string
      media_type:
        description: Media Type
        required: true
        type: choice
        options:
          - movie
          - show
      txdb_id:
        description: TMDb or TVDb ID
        required: true
        type: string
      url_poster:
        description: Poster URL
        required: true
        type: string
      genres:
        description: Genres, Comma Spaced
        required: true
        type: string
      season_posters:
        description: Seasons / Posters, Comma Spaced Season=Poster URL
        type: string

permissions:
  id-token: write
  contents: write

env:
  title: ${{ inputs.title }}
  release_year: ${{ inputs.release_year }}
  media_type: ${{ inputs.media_type }}
  txdb_id: ${{ inputs.txdb_id }}
  url_poster: ${{ inputs.url_poster }}
  genres_comma_spaced: ${{ inputs.genres }}
  season_posters_comma_spaced: ${{ inputs.season_posters }}
  MOVIE_METADATA_FILE: movie-metadata.yml
  SHOW_METADATA_FILE: show-metadata.yml
  UPDATE_SUMMARY_FILE: metadata_updates.md

jobs:
  update:
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.commit-changes.outputs.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Update metadata file with movie information
        if: env.media_type == 'movie'
        env:
          tmdb_id: ${{ env.txdb_id }}
        shell: bash
        run: |
          encoded_title="$(echo "$title" | sed -e 's/ /+/g' -e 's/&/%26/g')"
          tpdb_search="https://theposterdb.com/search?term=$encoded_title&section=movies"
          IFS=',' read -ra genres <<< "$genres_comma_spaced"
          genres=$(printf '%s\n' "${genres[@]}" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | jq -R . | jq -s .)
          
          lower_title="${title,,}"  # convert to lowercase for comparison
          sort_title="$title"
          for article in "a " "an " "the "; do
              if [[ "$lower_title" == "$article"* ]]; then
                  sort_title="${title:${#article}}"
                  break
              fi
          done
          
          sort_title=$(echo "$sort_title" | iconv -f UTF-8 -t ASCII//TRANSLIT)
          
          echo "$tmdb_id"
          echo "$title"
          echo "$sort_title"
          echo "$release_year"
          echo "$url_poster"
          echo "$tpdb_search"
          echo "$genres"

          if [[ $(yq '.metadata.${{ env.tmdb_id }}' ${{ env.MOVIE_METADATA_FILE }}) == null ]]; then
            echo "Movie does not exist, adding"
            yq -i '.metadata += {'"$tmdb_id"': {"label_title": "'"$title"'", "sort_title": "'"$sort_title"'", "release_year": "'"$release_year"'", "url_poster": "'"$url_poster"'", "tpdb_search": "'"$tpdb_search"'", "genre.sync": '"$genres"'}}' ${{ env.MOVIE_METADATA_FILE }}
          fi
      
      - name: Update metadata file with show information
        if: env.media_type == 'show'
        shell: bash
        env:
          tvdb_id: ${{ env.txdb_id }}
        run: |
          encoded_title="$(echo "$title" | sed -e 's/ /+/g' -e 's/&/%26/g')"
          tpdb_search="https://theposterdb.com/search?term=$encoded_title&section=movies"
          IFS=',' read -ra genres <<< "$genres_comma_spaced"
          genres=$(printf '%s\n' "${genres[@]}" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | jq -R . | jq -s .)
          
          lower_title="${title,,}"  # convert to lowercase for comparison
          sort_title="$title"
          for article in "a " "an " "the "; do
              if [[ "$lower_title" == "$article"* ]]; then
                  sort_title="${title:${#article}}"
                  break
              fi
          done
          
          readarray -t seasons < <(echo "$EPISODES" | jq '.[].seasonNumber' | sort -u)
          seasons=()
          IFS=',' read -ra season_poster_pairs <<< "$season_posters_comma_spaced"
          declare -A season_posters
          for pair in "${season_poster_pairs[@]}"; do
            season="${pair%%=*}"
            url="${pair#*=}"

            # Trim leading/trailing whitespace
            season="${season#"${season%%[![:space:]]*}"}"
            season="${season%"${season##*[![:space:]]}"}"
            url="${url#"${url%%[![:space:]]*}"}"
            url="${url%"${url##*[![:space:]]}"}"

            season_posters["$season"]="$url"
          done
          
          echo $tvdb_id
          echo $title
          echo $release_year
          echo $sort_title
          echo $tpdb_search

          if [[ $(yq '.metadata.${{ env.tvdb_id }}' ${{ env.SHOW_METADATA_FILE }}) == null ]]; then
            echo "Show does not exist, adding"
            yq -i '.metadata += {'"$tvdb_id"': {"label_title": "'"$title"'", "sort_title": "'"$sort_title"'", "release_year": "'"$release_year"'", "url_poster": "'"$url_poster"'", "tpdb_search": "'"$tpdb_search"'", "genre.sync": '"$genres"'}}' ${{ env.SHOW_METADATA_FILE }}
          fi
          
          for season in "${!season_posters[@]}"; do
            if [[ $(yq ".metadata.${{ env.tvdb_id }}.seasons.$season" ${{ env.SHOW_METADATA_FILE }}) == null ]]; then
              echo "Season does not exist, adding"
              yq -i '.metadata.${{ env.tvdb_id }}.seasons += {'"$season"': {"url_poster": "'"${season_posters[$season]}"'"}}' "$SHOW_METADATA_FILE"
            fi
          done

      - name: Sort and format metadata files
        run: |
          # Sort the metadata files
          bash "functions/yaml/sort-metadata-file.sh" "$MOVIE_METADATA_FILE"
          bash "functions/yaml/sort-metadata-file.sh" "$SHOW_METADATA_FILE"
          
          # Format the metadata files (mostly setting 'style="single"' to use single quotes over double quotes when applicable
          bash "functions/yaml/sort-metadata-file.sh" "$MOVIE_METADATA_FILE"
          bash "functions/yaml/sort-metadata-file.sh" "$SHOW_METADATA_FILE"
      
      - name: Commit Changes to Main
        id: commit-changes
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          old_sha=$(git rev-parse HEAD)
          git add "$MOVIE_METADATA_FILE"
          git add "$SHOW_METADATA_FILE"
          if ! git diff-index --quiet main; then
            git commit -m "Updating $title" >> "$UPDATE_SUMMARY_FILE"
            git push >> "$UPDATE_SUMMARY_FILE"
            new_sha=$(git rev-parse HEAD)
            git diff --unified=0 --no-color "$old_sha" "$new_sha" >> "$UPDATE_SUMMARY_FILE"
            sha=$new_sha
          else
            echo "No changes to commit." >> $UPDATE_SUMMARY_FILE
            sha=$old_sha
          fi
          echo "sha=$sha" >> $GITHUB_OUTPUT

      - name: Create Job Summary
        run: |
          echo "## Metadata Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`diff" >> $GITHUB_STEP_SUMMARY
          cat "$UPDATE_SUMMARY_FILE" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
