name: Manually add Media

on:
  workflow_dispatch:
    inputs:
      title:
        description: Title
        required: true
        type: string
      release_year:
        description: Release Year
        required: true
        type: string
      media_type:
        description: Media Type
        required: true
        type: choice
        options:
          - movie
          - show
      txdb_id:
        description: TXDb ID
        required: true
        type: string
      poster_url:
        description: Poster URL
        type: string
      genres:
        description: Genres, Comma Spaced
        type: string

permissions:
  id-token: write
  contents: write

env:
  title: ${{ inputs.title }}
  release_year: ${{ inputs.release_year }}
  media_type: ${{ inputs.media_type }}
  txdb_id: ${{ inputs.txdb_id }}
  poster_url: ${{ inputs.poster_url }}
  genres_comma_spaced: ${{ inputs.genres }}
  MOVIE_METADATA_FILE: movie-metadata.yml
  SHOW_METADATA_FILE: show-metadata.yml
  UPDATE_SUMMARY_FILE: metadata_updates.md

jobs:
  update:
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.commit-changes.outputs.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Update metadata file with movie information
        if: env.media_type == 'movie'
        env:
          tmdb_id: ${{ env.txdb_id }}
        shell: bash
        run: |
          encoded_title="$(echo "$title" | sed -e 's/ /+/g' -e 's/&/%26/g')"
          tpdb_search="https://theposterdb.com/search?term=$encoded_title&section=movies"
          IFS=',' read -ra genres <<< "$genres_comma_spaced"
          genres=$(printf '%s\n' "${genres[@]}" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | jq -R . | jq -s .)

          lower_title="${title,,}"  # convert to lowercase for comparison
          sort_title="$title"
          for article in "a " "an " "the "; do
              if [[ "$lower_title" == "$article"* ]]; then
                  sort_title="${title:${#article}}"
                  break
              fi
          done
          
          sort_title=$(echo "$sort_title" | iconv -f UTF-8 -t ASCII//TRANSLIT)
          
          echo "$tmdb_id"
          echo "$title"
          echo "$sort_title"
          echo "$release_year"
          echo "$poster_url"
          echo "$tpdb_search"
          echo "$genres"

          if [[ $(yq '.metadata.${{ env.tmdb_id }}' ${{ env.MOVIE_METADATA_FILE }}) == null ]]; then
            echo "Movie does not exist, adding"
            yq -i '.metadata += {'"$tmdb_id"': {"label_title": "'"$title"'", "sort_title": "'"$sort_title"'", "release_year": "'"$release_year"'", "url_poster": "", "tpdb_search": "'"$tpdb_search"'", "genre.sync": '"$genres"'}}' ${{ env.MOVIE_METADATA_FILE }}
            
            # https://chatgpt.com/share/68757652-e170-8003-b6e1-d625f0fb59f8
            # Sort title sorting
            yq -i '
              .metadata |= (
                to_entries
                | map(
                    .value.temp_sort = (
                      (.value.sort_title | downcase)
                      | sub("\\b([0-9])\\b"; "00000${1}")
                      | sub("\\b([0-9]{2})\\b"; "0000${1}")
                      | sub("\\b([0-9]{3})\\b"; "000${1}")
                      | sub("\\b([0-9]{4})\\b"; "00${1}")
                      | sub("\\b([0-9]{5})\\b"; "0${1}")
                    )
                  )
                | sort_by(.value.temp_sort)
                | map(.value |= del(.temp_sort))
                | from_entries
              )
              ' ${{ env.MOVIE_METADATA_FILE }}

            # General key sorting
            yq -i '
              .metadata |= with_entries(
                .value |= (
                  {
                    "label_title": .label_title,
                    "sort_title": .sort_title,
                    "release_year": .release_year,
                    "url_poster": .url_poster,
                    "tpdb_search": .tpdb_search,
                    "genre.sync": ."genre.sync"
                  } + .
                )
              )
              ' ${{ env.MOVIE_METADATA_FILE }}

            # Extra "studio" key sorting if exists
            yq -i '
              .metadata |= with_entries(
                .value |= (
                  {
                    "label_title": .label_title,
                    "sort_title": .sort_title,
                    "release_year": .release_year,
                    "url_poster": .url_poster,
                    "tpdb_search": .tpdb_search,
                    "genre.sync": ."genre.sync",
                    "studio": .studio
                  } + .
                )
              )
              ' ${{ env.MOVIE_METADATA_FILE }}
            
            # Sort the genres array
            yq -i '.metadata[] |= (.["genre.sync"] = (.["genre.sync"] // [] ) | .["genre.sync"] |= sort)' ${{ env.MOVIE_METADATA_FILE }}

            # Replace any double quotes with single quotes
            yq -i '.metadata.${{ env.tmdb_id }}.release_year style="single"' ${{ env.MOVIE_METADATA_FILE }}
            yq -i '.metadata.${{ env.tmdb_id }}.url_poster style="single"' ${{ env.MOVIE_METADATA_FILE }}
            yq ${{ env.MOVIE_METADATA_FILE }} # Debug
          fi
      
      - name: Commit Changes to Main
        id: commit-changes
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          old_sha=$(git rev-parse HEAD)
          git add ${{ env.MOVIE_METADATA_FILE }}
          git add ${{ env.SHOW_METADATA_FILE }}
          if ! git diff-index --quiet main; then
            git commit -m "Updating ${{ github.event.client_payload.title }}" >> "$UPDATE_SUMMARY_FILE"
            git push >> "$UPDATE_SUMMARY_FILE"
            new_sha=$(git rev-parse HEAD)
            git diff --unified=0 --no-color "$old_sha" "$new_sha" >> "$UPDATE_SUMMARY_FILE"
            sha=$new_sha
          else
            echo "No changes to commit." >> $UPDATE_SUMMARY_FILE
            sha=$old_sha
          fi
          echo "sha=$sha" >> $GITHUB_OUTPUT

      - name: Create Job Summary
        run: |
          echo "## Metadata Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`diff" >> $GITHUB_STEP_SUMMARY
          cat "$UPDATE_SUMMARY_FILE" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
